//#include <Arduino.h>
#include "I2S.h"
#include "SPI.h"
#include <TFT_eSPI.h>              // Hardware-specific library
TFT_eSPI tft = TFT_eSPI();         // Invoke custom library

#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>

#include "table_fft.h"
#include "cr4_fft_stm32.h"

//I2SClass I2S(SPI2, PB15 /*SD-DIN*/ , PB12 /*WS-LRC*/, PB13 /*CK-SCLK*/);
I2SClass I2S(SPI2);

#define SAMPLINGFREQUENCY 32000
//program multiplies this by 32 to get PDM clock frequency
#define NUMBEROFSAMPLES   128 //64*8
#define N_TAPS_FIR_DEC 37  // SINC4 DEC 10

#define BYTE_LEFT_MSB 0
#define BYTE_RIGHT_MSB 1
#define PDM_ENDIANNESS_BE 0
#define PDM_ENDIANNESS_LE 1
#define SINC3 0
#define SINC4 1
#define BLOCK_SIZE NUMBEROFSAMPLES
#define N_DATA_CIC_DEC (BLOCK_SIZE/DEC_CIC_FACTOR)
#define DEC_OUT_FACTOR 8 //prev was 10
#define FIR_DELAY 4
#define DEC_CIC_FACTOR 4
#define BITS_PER_SAMPLE 16

bool dmaDataReady = false;
//bool dmaDataDone = true;

#if BITS_PER_SAMPLE == 16
  int16_t Buffer[NUMBEROFSAMPLES];
  uint16_t fftIn[NUMBEROFSAMPLES/DEC_CIC_FACTOR];
  uint32_t fftIn32[NUMBEROFSAMPLES/DEC_CIC_FACTOR];
  uint32_t fftOut[NUMBEROFSAMPLES/DEC_CIC_FACTOR/2];
#elif BITS_PER_SAMPLE == 32
  int32_t Buffer[NUMBEROFSAMPLES];
  uint32_t fftIn[NUMBEROFSAMPLES/DEC_CIC_FACTOR];
  uint32_t fftOut[NUMBEROFSAMPLES/DEC_CIC_FACTOR/2];
#endif
  
//uint16_t fftOutShift[NUMBEROFSAMPLES/DEC_CIC_FACTOR/2];

/*
static int16_t fir_taps[7][N_TAPS_FIR_DEC] = {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {7, 26, 66, 131, 229, 367, 551, 786, 1081, 1442, 1848, 2281, 2720, 3146, 3539, 3880, 4148, 4325, 4391, 4325, 4148, 3880, 3539, 3146, 2720, 2281, 1848, 1442, 1081, 786, 551, 367, 229, 131, 66, 26, 7},
  {13, 52, 131, 262, 459, 734, 1101, 1573, 2163, 2884, 3696, 4561, 5439, 6291, 7078, 7759, 8297, 8651, 8782, 8651, 8297, 7759, 7078, 6291, 5439, 4561, 3696, 2884, 2163, 1573, 1101, 734, 459, 262, 131, 52, 13},
  {20, 79, 197, 393, 688, 1101, 1652, 2359, 3244, 4325, 5544, 6842, 8159, 9437, 10617, 11639, 12445, 12976, 13173, 12976, 12445, 11639, 10617, 9437, 8159, 6842, 5544, 4325, 3244, 2359, 1652, 1101, 688, 393, 197, 79, 20},
  {26, 105, 262, 524, 918, 1468, 2202, 3146, 4325, 5767, 7392, 9123, 10879, 12583, 14156, 15519, 16594, 17302, 17564, 17302, 16594, 15519, 14156, 12583, 10879, 9123, 7392, 5767, 4325, 3146, 2202, 1468, 918, 524, 262, 105, 26},
  {33, 131, 328, 655, 1147, 1835, 2753, 3932, 5407, 7209, 9241, 11403, 13599, 15729, 17695, 19399, 20742, 21627, 21955, 21627, 20742, 19399, 17695, 15729, 13599, 11403, 9241, 7209, 5407, 3932, 2753, 1835, 1147, 655, 328, 131, 33},
  {39, 157, 393, 786, 1376, 2202, 3303, 4719, 6488, 8651, 11089, 13684, 16318, 18874, 21234, 23278, 24891, 25952, 26345, 25952, 24891, 23278, 21234, 18874, 16318, 13684, 11089, 8651, 6488, 4719, 3303, 2202, 1376, 786, 393, 157, 39}
};
int32_t volume = 5;
int16_t FirState[((BLOCK_SIZE / DEC_CIC_FACTOR) + N_TAPS_FIR_DEC - 1)];
int16_t data_out_decim[N_DATA_CIC_DEC / DEC_OUT_FACTOR];
int16_t data_in_cic_decim[N_DATA_CIC_DEC];
uint32_t delay_counter;
int16_t delay_buf[FIR_DELAY];

int pdm2pcm_init(int bit_order, int endianess, int sinc){
  int ret_val = 0;
  ret_val = LuT_Filter_init(bit_order, endianess, sinc);
  //arm_fir_decimate_init_q15(&fir_decim_S, N_TAPS_FIR_DEC, DEC_OUT_FACTOR, fir_taps[volume], FirState, (BLOCK_SIZE / DEC_CIC_FACTOR));
  memset(delay_buf, 0, sizeof(int16_t)*FIR_DELAY);
  delay_counter = 0;
  return ret_val;
}

int pdm2pcm(uint8_t *data_in, int16_t *data_out, int16_t size)
{
  int16_t k, cic_dec_l, out_dec_l, size_dec;

  cic_dec_l = size / DEC_CIC_FACTOR;
  
  out_dec_l = cic_dec_l / DEC_OUT_FACTOR;

  size_dec = size >> 3;
  LuT_Filter(data_in, data_in_cic_decim, size_dec);
  // ****** Second cic-decim, high-pass iir and Group-delay compensation *********************
  //arm_fir_decimate_q15(&fir_decim_S, data_in_cic_decim, data_out_decim, (BLOCK_SIZE / DEC_CIC_FACTOR));
  //arm_fir_decimate_q15(&fir_decim_S, data_in, data_out_decim, (BLOCK_SIZE / DEC_CIC_FACTOR));

  //iir_hp(data_out_decim, out_dec_l);

  for (k = 0; k < out_dec_l; k++) {
    //============================================================================
    *(data_out + k) = delay_buf[delay_counter]; // compensate the group delay of filter cascade

    delay_buf[delay_counter++] = data_out_decim[k];

    if (delay_counter == FIR_DELAY) {
      delay_counter = 0;
    }
  }

  return 0;
}

uint32_t Addr;

int16_t LuT1[2][256] = {
  {-7680, -7552, -7296, -7168, -6912, -6784, -6528, -6400, -6400, -6272, -6016, -5888, -5632, -5504, -5248, -5120, -5760, -5632, -5376, -5248, -4992, -4864, -4608, -4480, -4480, -4352, -4096, -3968, -3712, -3584, -3328, -3200, -4992, -4864, -4608, -4480, -4224, -4096, -3840, -3712, -3712, -3584, -3328, -3200, -2944, -2816, -2560, -2432, -3072, -2944, -2688, -2560, -2304, -2176, -1920, -1792, -1792, -1664, -1408, -1280, -1024, -896, -640, -512, -4096, -3968, -3712, -3584, -3328, -3200, -2944, -2816, -2816, -2688, -2432, -2304, -2048, -1920, -1664, -1536, -2176, -2048, -1792, -1664, -1408, -1280, -1024, -896, -896, -768, -512, -384, -128, 0, 256, 384, -1408, -1280, -1024, -896, -640, -512, -256, -128, -128, 0, 256, 384, 640, 768, 1024, 1152, 512, 640, 896, 1024, 1280, 1408, 1664, 1792, 1792, 1920, 2176, 2304, 2560, 2688, 2944, 3072, -3072, -2944, -2688, -2560, -2304, -2176, -1920, -1792, -1792, -1664, -1408, -1280, -1024, -896, -640, -512, -1152, -1024, -768, -640, -384, -256, 0, 128, 128, 256, 512, 640, 896, 1024, 1280, 1408, -384, -256, 0, 128, 384, 512, 768, 896, 896, 1024, 1280, 1408, 1664, 1792, 2048, 2176, 1536, 1664, 1920, 2048, 2304, 2432, 2688, 2816, 2816, 2944, 3200, 3328, 3584, 3712, 3968, 4096, 512, 640, 896, 1024, 1280, 1408, 1664, 1792, 1792, 1920, 2176, 2304, 2560, 2688, 2944, 3072, 2432, 2560, 2816, 2944, 3200, 3328, 3584, 3712, 3712, 3840, 4096, 4224, 4480, 4608, 4864, 4992, 3200, 3328, 3584, 3712, 3968, 4096, 4352, 4480, 4480, 4608, 4864, 4992, 5248, 5376, 5632, 5760, 5120, 5248, 5504, 5632, 5888, 6016, 6272, 6400, 6400, 6528, 6784, 6912, 7168, 7296, 7552, 7680},
  {-7680, -3072, -4096, 512, -4992, -384, -1408, 3200, -5760, -1152, -2176, 2432, -3072, 1536, 512, 5120, -6400, -1792, -2816, 1792, -3712, 896, -128, 4480, -4480, 128, -896, 3712, -1792, 2816, 1792, 6400, -6912, -2304, -3328, 1280, -4224, 384, -640, 3968, -4992, -384, -1408, 3200, -2304, 2304, 1280, 5888, -5632, -1024, -2048, 2560, -2944, 1664, 640, 5248, -3712, 896, -128, 4480, -1024, 3584, 2560, 7168, -7296, -2688, -3712, 896, -4608, 0, -1024, 3584, -5376, -768, -1792, 2816, -2688, 1920, 896, 5504, -6016, -1408, -2432, 2176, -3328, 1280, 256, 4864, -4096, 512, -512, 4096, -1408, 3200, 2176, 6784, -6528, -1920, -2944, 1664, -3840, 768, -256, 4352, -4608, 0, -1024, 3584, -1920, 2688, 1664, 6272, -5248, -640, -1664, 2944, -2560, 2048, 1024, 5632, -3328, 1280, 256, 4864, -640, 3968, 2944, 7552, -7552, -2944, -3968, 640, -4864, -256, -1280, 3328, -5632, -1024, -2048, 2560, -2944, 1664, 640, 5248, -6272, -1664, -2688, 1920, -3584, 1024, 0, 4608, -4352, 256, -768, 3840, -1664, 2944, 1920, 6528, -6784, -2176, -3200, 1408, -4096, 512, -512, 4096, -4864, -256, -1280, 3328, -2176, 2432, 1408, 6016, -5504, -896, -1920, 2688, -2816, 1792, 768, 5376, -3584, 1024, 0, 4608, -896, 3712, 2688, 7296, -7168, -2560, -3584, 1024, -4480, 128, -896, 3712, -5248, -640, -1664, 2944, -2560, 2048, 1024, 5632, -5888, -1280, -2304, 2304, -3200, 1408, 384, 4992, -3968, 640, -384, 4224, -1280, 3328, 2304, 6912, -6400, -1792, -2816, 1792, -3712, 896, -128, 4480, -4480, 128, -896, 3712, -1792, 2816, 1792, 6400, -5120, -512, -1536, 3072, -2432, 2176, 1152, 5760, -3200, 1408, 384, 4992, -512, 4096, 3072, 7680}
}; // Q15
int16_t LuT2[2][256] = {
  {-21504, -16128, -15616, -10240, -15360, -9984, -9472, -4096, -15360, -9984, -9472, -4096, -9216, -3840, -3328, 2048, -15616, -10240, -9728, -4352, -9472, -4096, -3584, 1792, -9472, -4096, -3584, 1792, -3328, 2048, 2560, 7936, -16128, -10752, -10240, -4864, -9984, -4608, -4096, 1280, -9984, -4608, -4096, 1280, -3840, 1536, 2048, 7424, -10240, -4864, -4352, 1024, -4096, 1280, 1792, 7168, -4096, 1280, 1792, 7168, 2048, 7424, 7936, 13312, -16896, -11520, -11008, -5632, -10752, -5376, -4864, 512, -10752, -5376, -4864, 512, -4608, 768, 1280, 6656, -11008, -5632, -5120, 256, -4864, 512, 1024, 6400, -4864, 512, 1024, 6400, 1280, 6656, 7168, 12544, -11520, -6144, -5632, -256, -5376, 0, 512, 5888, -5376, 0, 512, 5888, 768, 6144, 6656, 12032, -5632, -256, 256, 5632, 512, 5888, 6400, 11776, 512, 5888, 6400, 11776, 6656, 12032, 12544, 17920, -17920, -12544, -12032, -6656, -11776, -6400, -5888, -512, -11776, -6400, -5888, -512, -5632, -256, 256, 5632, -12032, -6656, -6144, -768, -5888, -512, 0, 5376, -5888, -512, 0, 5376, 256, 5632, 6144, 11520, -12544, -7168, -6656, -1280, -6400, -1024, -512, 4864, -6400, -1024, -512, 4864, -256, 5120, 5632, 11008, -6656, -1280, -768, 4608, -512, 4864, 5376, 10752, -512, 4864, 5376, 10752, 5632, 11008, 11520, 16896, -13312, -7936, -7424, -2048, -7168, -1792, -1280, 4096, -7168, -1792, -1280, 4096, -1024, 4352, 4864, 10240, -7424, -2048, -1536, 3840, -1280, 4096, 4608, 9984, -1280, 4096, 4608, 9984, 4864, 10240, 10752, 16128, -7936, -2560, -2048, 3328, -1792, 3584, 4096, 9472, -1792, 3584, 4096, 9472, 4352, 9728, 10240, 15616, -2048, 3328, 3840, 9216, 4096, 9472, 9984, 15360, 4096, 9472, 9984, 15360, 10240, 15616, 16128, 21504},
  {-21504, -17920, -16896, -13312, -16128, -12544, -11520, -7936, -15616, -12032, -11008, -7424, -10240, -6656, -5632, -2048, -15360, -11776, -10752, -7168, -9984, -6400, -5376, -1792, -9472, -5888, -4864, -1280, -4096, -512, 512, 4096, -15360, -11776, -10752, -7168, -9984, -6400, -5376, -1792, -9472, -5888, -4864, -1280, -4096, -512, 512, 4096, -9216, -5632, -4608, -1024, -3840, -256, 768, 4352, -3328, 256, 1280, 4864, 2048, 5632, 6656, 10240, -15616, -12032, -11008, -7424, -10240, -6656, -5632, -2048, -9728, -6144, -5120, -1536, -4352, -768, 256, 3840, -9472, -5888, -4864, -1280, -4096, -512, 512, 4096, -3584, 0, 1024, 4608, 1792, 5376, 6400, 9984, -9472, -5888, -4864, -1280, -4096, -512, 512, 4096, -3584, 0, 1024, 4608, 1792, 5376, 6400, 9984, -3328, 256, 1280, 4864, 2048, 5632, 6656, 10240, 2560, 6144, 7168, 10752, 7936, 11520, 12544, 16128, -16128, -12544, -11520, -7936, -10752, -7168, -6144, -2560, -10240, -6656, -5632, -2048, -4864, -1280, -256, 3328, -9984, -6400, -5376, -1792, -4608, -1024, 0, 3584, -4096, -512, 512, 4096, 1280, 4864, 5888, 9472, -9984, -6400, -5376, -1792, -4608, -1024, 0, 3584, -4096, -512, 512, 4096, 1280, 4864, 5888, 9472, -3840, -256, 768, 4352, 1536, 5120, 6144, 9728, 2048, 5632, 6656, 10240, 7424, 11008, 12032, 15616, -10240, -6656, -5632, -2048, -4864, -1280, -256, 3328, -4352, -768, 256, 3840, 1024, 4608, 5632, 9216, -4096, -512, 512, 4096, 1280, 4864, 5888, 9472, 1792, 5376, 6400, 9984, 7168, 10752, 11776, 15360, -4096, -512, 512, 4096, 1280, 4864, 5888, 9472, 1792, 5376, 6400, 9984, 7168, 10752, 11776, 15360, 2048, 5632, 6656, 10240, 7424, 11008, 12032, 15616, 7936, 11520, 12544, 16128, 13312, 16896, 17920, 21504}
}; // Q15
int16_t LuT3[2][64] = {
  {-3584, -896, -1664, 1024, -2304, 384, -384, 2304, -2816, -128, -896, 1792, -1536, 1152, 384, 3072, -3200, -512, -1280, 1408, -1920, 768, 0, 2688, -2432, 256, -512, 2176, -1152, 1536, 768, 3456, -3456, -768, -1536, 1152, -2176, 512, -256, 2432, -2688, 0, -768, 1920, -1408, 1280, 512, 3200, -3072, -384, -1152, 1536, -1792, 896, 128, 2816, -2304, 384, -384, 2304, -1024, 1664, 896, 3584},
  {-3584, -3456, -3200, -3072, -2816, -2688, -2432, -2304, -2304, -2176, -1920, -1792, -1536, -1408, -1152, -1024, -1664, -1536, -1280, -1152, -896, -768, -512, -384, -384, -256, 0, 128, 384, 512, 768, 896, -896, -768, -512, -384, -128, 0, 256, 384, 384, 512, 768, 896, 1152, 1280, 1536, 1664, 1024, 1152, 1408, 1536, 1792, 1920, 2176, 2304, 2304, 2432, 2688, 2816, 3072, 3200, 3456, 3584}
}; // Q15
//SINC4 // 29 taps cic-filter dec 8 --> [ 2^8, 2^8, 2^8, 2^5]
int16_t LuT4[2][256] = {
  {-2640, -2624, -2576, -2560, -2480, -2464, -2416, -2400, -2320, -2304, -2256, -2240, -2160, -2144, -2096, -2080, -2080, -2064, -2016, -2000, -1920, -1904, -1856, -1840, -1760, -1744, -1696, -1680, -1600, -1584, -1536, -1520, -1744, -1728, -1680, -1664, -1584, -1568, -1520, -1504, -1424, -1408, -1360, -1344, -1264, -1248, -1200, -1184, -1184, -1168, -1120, -1104, -1024, -1008, -960, -944, -864, -848, -800, -784, -704, -688, -640, -624, -1296, -1280, -1232, -1216, -1136, -1120, -1072, -1056, -976, -960, -912, -896, -816, -800, -752, -736, -736, -720, -672, -656, -576, -560, -512, -496, -416, -400, -352, -336, -256, -240, -192, -176, -400, -384, -336, -320, -240, -224, -176, -160, -80, -64, -16, 0, 80, 96, 144, 160, 160, 176, 224, 240, 320, 336, 384, 400, 480, 496, 544, 560, 640, 656, 704, 720, -720, -704, -656, -640, -560, -544, -496, -480, -400, -384, -336, -320, -240, -224, -176, -160, -160, -144, -96, -80, 0, 16, 64, 80, 160, 176, 224, 240, 320, 336, 384, 400, 176, 192, 240, 256, 336, 352, 400, 416, 496, 512, 560, 576, 656, 672, 720, 736, 736, 752, 800, 816, 896, 912, 960, 976, 1056, 1072, 1120, 1136, 1216, 1232, 1280, 1296, 624, 640, 688, 704, 784, 800, 848, 864, 944, 960, 1008, 1024, 1104, 1120, 1168, 1184, 1184, 1200, 1248, 1264, 1344, 1360, 1408, 1424, 1504, 1520, 1568, 1584, 1664, 1680, 1728, 1744, 1520, 1536, 1584, 1600, 1680, 1696, 1744, 1760, 1840, 1856, 1904, 1920, 2000, 2016, 2064, 2080, 2080, 2096, 2144, 2160, 2240, 2256, 2304, 2320, 2400, 2416, 2464, 2480, 2560, 2576, 2624, 2640},
  {-2640, -720, -1296, 624, -1744, 176, -400, 1520, -2080, -160, -736, 1184, -1184, 736, 160, 2080, -2320, -400, -976, 944, -1424, 496, -80, 1840, -1760, 160, -416, 1504, -864, 1056, 480, 2400, -2480, -560, -1136, 784, -1584, 336, -240, 1680, -1920, 0, -576, 1344, -1024, 896, 320, 2240, -2160, -240, -816, 1104, -1264, 656, 80, 2000, -1600, 320, -256, 1664, -704, 1216, 640, 2560, -2576, -656, -1232, 688, -1680, 240, -336, 1584, -2016, -96, -672, 1248, -1120, 800, 224, 2144, -2256, -336, -912, 1008, -1360, 560, -16, 1904, -1696, 224, -352, 1568, -800, 1120, 544, 2464, -2416, -496, -1072, 848, -1520, 400, -176, 1744, -1856, 64, -512, 1408, -960, 960, 384, 2304, -2096, -176, -752, 1168, -1200, 720, 144, 2064, -1536, 384, -192, 1728, -640, 1280, 704, 2624, -2624, -704, -1280, 640, -1728, 192, -384, 1536, -2064, -144, -720, 1200, -1168, 752, 176, 2096, -2304, -384, -960, 960, -1408, 512, -64, 1856, -1744, 176, -400, 1520, -848, 1072, 496, 2416, -2464, -544, -1120, 800, -1568, 352, -224, 1696, -1904, 16, -560, 1360, -1008, 912, 336, 2256, -2144, -224, -800, 1120, -1248, 672, 96, 2016, -1584, 336, -240, 1680, -688, 1232, 656, 2576, -2560, -640, -1216, 704, -1664, 256, -320, 1600, -2000, -80, -656, 1264, -1104, 816, 240, 2160, -2240, -320, -896, 1024, -1344, 576, 0, 1920, -1680, 240, -336, 1584, -784, 1136, 560, 2480, -2400, -480, -1056, 864, -1504, 416, -160, 1760, -1840, 80, -496, 1424, -944, 976, 400, 2320, -2080, -160, -736, 1184, -1184, 736, 160, 2080, -1520, 400, -176, 1744, -624, 1296, 720, 2640}
};
int16_t LuT5[2][256] = {
  {-17808, -15232, -14544, -11968, -13872, -11296, -10608, -8032, -13264, -10688, -10000, -7424, -9328, -6752, -6064, -3488, -12768, -10192, -9504, -6928, -8832, -6256, -5568, -2992, -8224, -5648, -4960, -2384, -4288, -1712, -1024, 1552, -12432, -9856, -9168, -6592, -8496, -5920, -5232, -2656, -7888, -5312, -4624, -2048, -3952, -1376, -688, 1888, -7392, -4816, -4128, -1552, -3456, -880, -192, 2384, -2848, -272, 416, 2992, 1088, 3664, 4352, 6928, -12304, -9728, -9040, -6464, -8368, -5792, -5104, -2528, -7760, -5184, -4496, -1920, -3824, -1248, -560, 2016, -7264, -4688, -4000, -1424, -3328, -752, -64, 2512, -2720, -144, 544, 3120, 1216, 3792, 4480, 7056, -6928, -4352, -3664, -1088, -2992, -416, 272, 2848, -2384, 192, 880, 3456, 1552, 4128, 4816, 7392, -1888, 688, 1376, 3952, 2048, 4624, 5312, 7888, 2656, 5232, 5920, 8496, 6592, 9168, 9856, 12432, -12432, -9856, -9168, -6592, -8496, -5920, -5232, -2656, -7888, -5312, -4624, -2048, -3952, -1376, -688, 1888, -7392, -4816, -4128, -1552, -3456, -880, -192, 2384, -2848, -272, 416, 2992, 1088, 3664, 4352, 6928, -7056, -4480, -3792, -1216, -3120, -544, 144, 2720, -2512, 64, 752, 3328, 1424, 4000, 4688, 7264, -2016, 560, 1248, 3824, 1920, 4496, 5184, 7760, 2528, 5104, 5792, 8368, 6464, 9040, 9728, 12304, -6928, -4352, -3664, -1088, -2992, -416, 272, 2848, -2384, 192, 880, 3456, 1552, 4128, 4816, 7392, -1888, 688, 1376, 3952, 2048, 4624, 5312, 7888, 2656, 5232, 5920, 8496, 6592, 9168, 9856, 12432, -1552, 1024, 1712, 4288, 2384, 4960, 5648, 8224, 2992, 5568, 6256, 8832, 6928, 9504, 10192, 12768, 3488, 6064, 6752, 9328, 7424, 10000, 10688, 13264, 8032, 10608, 11296, 13872, 11968, 14544, 15232, 17808},
  {-17808, -12432, -12304, -6928, -12432, -7056, -6928, -1552, -12768, -7392, -7264, -1888, -7392, -2016, -1888, 3488, -13264, -7888, -7760, -2384, -7888, -2512, -2384, 2992, -8224, -2848, -2720, 2656, -2848, 2528, 2656, 8032, -13872, -8496, -8368, -2992, -8496, -3120, -2992, 2384, -8832, -3456, -3328, 2048, -3456, 1920, 2048, 7424, -9328, -3952, -3824, 1552, -3952, 1424, 1552, 6928, -4288, 1088, 1216, 6592, 1088, 6464, 6592, 11968, -14544, -9168, -9040, -3664, -9168, -3792, -3664, 1712, -9504, -4128, -4000, 1376, -4128, 1248, 1376, 6752, -10000, -4624, -4496, 880, -4624, 752, 880, 6256, -4960, 416, 544, 5920, 416, 5792, 5920, 11296, -10608, -5232, -5104, 272, -5232, 144, 272, 5648, -5568, -192, -64, 5312, -192, 5184, 5312, 10688, -6064, -688, -560, 4816, -688, 4688, 4816, 10192, -1024, 4352, 4480, 9856, 4352, 9728, 9856, 15232, -15232, -9856, -9728, -4352, -9856, -4480, -4352, 1024, -10192, -4816, -4688, 688, -4816, 560, 688, 6064, -10688, -5312, -5184, 192, -5312, 64, 192, 5568, -5648, -272, -144, 5232, -272, 5104, 5232, 10608, -11296, -5920, -5792, -416, -5920, -544, -416, 4960, -6256, -880, -752, 4624, -880, 4496, 4624, 10000, -6752, -1376, -1248, 4128, -1376, 4000, 4128, 9504, -1712, 3664, 3792, 9168, 3664, 9040, 9168, 14544, -11968, -6592, -6464, -1088, -6592, -1216, -1088, 4288, -6928, -1552, -1424, 3952, -1552, 3824, 3952, 9328, -7424, -2048, -1920, 3456, -2048, 3328, 3456, 8832, -2384, 2992, 3120, 8496, 2992, 8368, 8496, 13872, -8032, -2656, -2528, 2848, -2656, 2720, 2848, 8224, -2992, 2384, 2512, 7888, 2384, 7760, 7888, 13264, -3488, 1888, 2016, 7392, 1888, 7264, 7392, 12768, 1552, 6928, 7056, 12432, 6928, 12304, 12432, 17808}
};
int16_t LuT6[2][256] = {
  {-11760, -6720, -7216, -2176, -7824, -2784, -3280, 1760, -8496, -3456, -3952, 1088, -4560, 480, -16, 5024, -9184, -4144, -4640, 400, -5248, -208, -704, 4336, -5920, -880, -1376, 3664, -1984, 3056, 2560, 7600, -9840, -4800, -5296, -256, -5904, -864, -1360, 3680, -6576, -1536, -2032, 3008, -2640, 2400, 1904, 6944, -7264, -2224, -2720, 2320, -3328, 1712, 1216, 6256, -4000, 1040, 544, 5584, -64, 4976, 4480, 9520, -10416, -5376, -5872, -832, -6480, -1440, -1936, 3104, -7152, -2112, -2608, 2432, -3216, 1824, 1328, 6368, -7840, -2800, -3296, 1744, -3904, 1136, 640, 5680, -4576, 464, -32, 5008, -640, 4400, 3904, 8944, -8496, -3456, -3952, 1088, -4560, 480, -16, 5024, -5232, -192, -688, 4352, -1296, 3744, 3248, 8288, -5920, -880, -1376, 3664, -1984, 3056, 2560, 7600, -2656, 2384, 1888, 6928, 1280, 6320, 5824, 10864, -10864, -5824, -6320, -1280, -6928, -1888, -2384, 2656, -7600, -2560, -3056, 1984, -3664, 1376, 880, 5920, -8288, -3248, -3744, 1296, -4352, 688, 192, 5232, -5024, 16, -480, 4560, -1088, 3952, 3456, 8496, -8944, -3904, -4400, 640, -5008, 32, -464, 4576, -5680, -640, -1136, 3904, -1744, 3296, 2800, 7840, -6368, -1328, -1824, 3216, -2432, 2608, 2112, 7152, -3104, 1936, 1440, 6480, 832, 5872, 5376, 10416, -9520, -4480, -4976, 64, -5584, -544, -1040, 4000, -6256, -1216, -1712, 3328, -2320, 2720, 2224, 7264, -6944, -1904, -2400, 2640, -3008, 2032, 1536, 6576, -3680, 1360, 864, 5904, 256, 5296, 4800, 9840, -7600, -2560, -3056, 1984, -3664, 1376, 880, 5920, -4336, 704, 208, 5248, -400, 4640, 4144, 9184, -5024, 16, -480, 4560, -1088, 3952, 3456, 8496, -1760, 3280, 2784, 7824, 2176, 7216, 6720, 11760},
  {-11760, -10864, -10416, -9520, -9840, -8944, -8496, -7600, -9184, -8288, -7840, -6944, -7264, -6368, -5920, -5024, -8496, -7600, -7152, -6256, -6576, -5680, -5232, -4336, -5920, -5024, -4576, -3680, -4000, -3104, -2656, -1760, -7824, -6928, -6480, -5584, -5904, -5008, -4560, -3664, -5248, -4352, -3904, -3008, -3328, -2432, -1984, -1088, -4560, -3664, -3216, -2320, -2640, -1744, -1296, -400, -1984, -1088, -640, 256, -64, 832, 1280, 2176, -7216, -6320, -5872, -4976, -5296, -4400, -3952, -3056, -4640, -3744, -3296, -2400, -2720, -1824, -1376, -480, -3952, -3056, -2608, -1712, -2032, -1136, -688, 208, -1376, -480, -32, 864, 544, 1440, 1888, 2784, -3280, -2384, -1936, -1040, -1360, -464, -16, 880, -704, 192, 640, 1536, 1216, 2112, 2560, 3456, -16, 880, 1328, 2224, 1904, 2800, 3248, 4144, 2560, 3456, 3904, 4800, 4480, 5376, 5824, 6720, -6720, -5824, -5376, -4480, -4800, -3904, -3456, -2560, -4144, -3248, -2800, -1904, -2224, -1328, -880, 16, -3456, -2560, -2112, -1216, -1536, -640, -192, 704, -880, 16, 464, 1360, 1040, 1936, 2384, 3280, -2784, -1888, -1440, -544, -864, 32, 480, 1376, -208, 688, 1136, 2032, 1712, 2608, 3056, 3952, 480, 1376, 1824, 2720, 2400, 3296, 3744, 4640, 3056, 3952, 4400, 5296, 4976, 5872, 6320, 7216, -2176, -1280, -832, 64, -256, 640, 1088, 1984, 400, 1296, 1744, 2640, 2320, 3216, 3664, 4560, 1088, 1984, 2432, 3328, 3008, 3904, 4352, 5248, 3664, 4560, 5008, 5904, 5584, 6480, 6928, 7824, 1760, 2656, 3104, 4000, 3680, 4576, 5024, 5920, 4336, 5232, 5680, 6576, 6256, 7152, 7600, 8496, 5024, 5920, 6368, 7264, 6944, 7840, 8288, 9184, 7600, 8496, 8944, 9840, 9520, 10416, 10864, 11760}
};
int16_t LuT7[2][32] = {
  {-560, 0, -240, 320, -400, 160, -80, 480, -496, 64, -176, 384, -336, 224, -16, 544, -544, 16, -224, 336, -384, 176, -64, 496, -480, 80, -160, 400, -320, 240, 0, 560},
  {-560, -544, -496, -480, -400, -384, -336, -320, -240, -224, -176, -160, -80, -64, -16, 0, 0, 16, 64, 80, 160, 176, 224, 240, 320, 336, 384, 400, 480, 496, 544, 560}
};


int bit_order, endianness, sinc;

int LuT_Filter_init(int bitOrder, int endian, int sinc)
{
  Addr = 0;
  if ((bitOrder != 0 && bitOrder != 1) || (endian != 0 && endian != 1) || (sinc != 0 && sinc != 1)) {
    return 1;
  }
  endianness = endian;
  sinc = sinc;
  bit_order = bitOrder;
  return 0;
}

void LuT_Filter(uint8_t *PntIn, int16_t *PntOut, uint16_t LBlock)
{
  int16_t h;
  register uint8_t *PntAddr1, *PntAddr2, *PntAddr3, *PntAddr4;
  if (sinc == 0) { //SINC3
    PntAddr3 = (uint8_t *)(&Addr);
    PntAddr2 = PntAddr3 + 1;
    PntAddr1 = PntAddr2 + 1;
  } else { //SINC4
    PntAddr4 = (uint8_t *)(&Addr);
    PntAddr3 = PntAddr4 + 1;
    PntAddr2 = PntAddr3 + 1;
    PntAddr1 = PntAddr2 + 1;
  }

  for (h = 0; h < LBlock; h++) {
    if (sinc == 0) { //SINC3
      if (endianness == 0) {
        Addr = (Addr >> 8) | (*(PntIn - 2 * (h % 2) + 1) << 16);  //PDM_ENDIANNESS_BE
      } else {
        Addr = (Addr >> 8) | (*PntIn << 16);  //PDM_ENDIANNESS_LE
      }
      PntIn++;
      if (bit_order == 0) {
        *PntOut++ = LuT1[bit_order][*PntAddr1] + LuT2[bit_order][*PntAddr2] + LuT3[bit_order][(*PntAddr3) & 0x3F];  //BYTE_LEFT_MSB
      } else {
        *PntOut++ = LuT1[bit_order][*PntAddr1] + LuT2[bit_order][*PntAddr2] + LuT3[bit_order][*PntAddr3 >> 2];  //BYTE_RIGHT_MSB
      }
    } else { //SINC4
      if (endianness == 0) {
        Addr = (Addr >> 8) | (*(PntIn - 2 * (h % 2) + 1) << 24);  //PDM_ENDIANNESS_BE
      } else {
        Addr = (Addr >> 8) | (*PntIn << 24);  //PDM_ENDIANNESS_LE
      }
      PntIn++;
      if (bit_order == 0) {
        *PntOut++ = LuT4[bit_order][*PntAddr1] + LuT5[bit_order][*PntAddr2] + LuT6[bit_order][*PntAddr3] + LuT7[bit_order][(*PntAddr4) & 0x1F];  //BYTE_LEFTT_MSB
      } else {
        *PntOut++ = LuT4[bit_order][*PntAddr1] + LuT5[bit_order][*PntAddr2] + LuT6[bit_order][*PntAddr3] + LuT7[bit_order][*PntAddr4 >> 3];  //BYTE_RIGHT_MSB
      }
    }
  }

  return;
}
*/

uint16_t asqrt(uint32_t x) { //good enough precision, 10x faster than regular sqrt
  //
  int32_t op, res, one;
  op = x;
  res = 0;
  one = 1 << 30;
  while (one > op) one >>= 2;
  while (one != 0) {
    if (op >= res + one) {
      op = op - (res + one);
      res = res +  2 * one;
    }
    res /= 2;
    one /= 4;
  }
  return (uint16_t) (res);
}

void real_to_complex(uint16_t * in, uint32_t * out, int len) {
  //
  for (int i = 0; i < len; i++) out[i] = in[i];// * 8;
}

void inplace_magnitude(uint32_t * target, uint16_t len) {
  // 
  uint16_t * p16;
  for (int i = 0; i < len; i ++) {
    //
    int16_t real = fftOut[i] & 0xFFFF;
    int16_t imag = fftOut[i] >> 16;
//    target[i] = 10 * log10(real*real + imag*imag);
    uint32_t magnitude = asqrt(real*real + imag*imag);
    fftOut[i] = magnitude; 
  }
}

uint32_t perform_fft(uint32_t * indata, uint32_t * outdata, const int len) {
  cr4_fft_256_stm32(outdata, indata, len);
  inplace_magnitude(outdata, len);
}

extern "C" void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
  //I2S.dmaDone = true;
  //I2S.dataReady = true;
  //dmaDataDone = true;
  dmaDataReady = true;
  //int a = 5 + 13;
}

extern "C" void DMA1_Stream3_IRQHandler(void)
{
    HAL_DMA_IRQHandler(&I2S.dmaHandle);
}



void setup()
{
  Serial.begin(115200);
  Serial.println("Begin");
  //Serial.println((AUDIO_IN_FREQ * 1000) / AUDIO_IN_SAMPLING_FREQUENCY);
  //Serial.println(pdm2pcm_init(BYTE_LEFT_MSB, PDM_ENDIANNESS_BE, SINC4));
  delay(1000);  

  I2S.dmaSendSize=NUMBEROFSAMPLES;

  Serial.println(I2S.begin(I2S_LEFT_JUSTIFIED_MODE, SAMPLINGFREQUENCY, BITS_PER_SAMPLE));
  I2S.setBuffer(Buffer,NUMBEROFSAMPLES);
  delay(1000);
  I2S.read();
  Serial.println("Init OK");
  Serial.println(HAL_I2S_GetState(&I2S.handle));
}

String data = "";
uint16_t movAvg = 0;

void loop()
{
  Serial.println(HAL_I2S_GetState(&I2S.handle));
  if(dmaDataReady){
    Serial.println("flag");
    movAvg = 0;
    for(int i = 0; i<NUMBEROFSAMPLES;i++){
      for (int j = 0;  j < BITS_PER_SAMPLE;  ++j){
        if((Buffer[i] & (1 << j))!=0){
            movAvg += 1;
        }
      }
      if(i%DEC_CIC_FACTOR==0 && i!=0){
        //Serial.println(movAvg);
        fftIn[i/DEC_CIC_FACTOR] = (movAvg*10)/DEC_CIC_FACTOR;
        //Serial.println((int32_t)fftIn[i/DEC_CIC_FACTOR]-(int32_t)160);
        //Serial.println(((movAvg-16)*10)/DEC_CIC_FACTOR);
        //Serial.println(((float)(movAvg-16.0))/(float)DEC_CIC_FACTOR);
        movAvg = 0;
      }
    }    

    #if BITS_PER_SAMPLE == 16
      real_to_complex(fftIn, fftIn32, NUMBEROFSAMPLES/DEC_CIC_FACTOR);
      perform_fft(fftIn32, fftOut, NUMBEROFSAMPLES/DEC_CIC_FACTOR);
    #else
      perform_fft(fftIn, fftOut, NUMBEROFSAMPLES/DEC_CIC_FACTOR);
    #endif

    
    for(int i = 1; i<NUMBEROFSAMPLES/DEC_CIC_FACTOR/2; i++) {
      //fftOutShift[i] = (uint16_t)32768+(uint16_t)fftOut[i];
      //Serial.println(fftOut[i]);
      data = data + "\t" + fftOut[i];
    }

    Serial.println(data);
    data = "";
    //delay(1);
    I2S.dataReady = false;
    I2S.read();
    //memset(fftOut,0,sizeof(fftOutShift));
  }
}
